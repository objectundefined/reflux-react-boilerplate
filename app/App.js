var Store = require('./Store.js');
var actions = require('./actions.js');
var React = require('react');
var ReactDOM = require('react-dom');
var LinkedStateMixin = require('react-addons-linked-state-mixin');
var $ = window.jQuery = require('jquery');
var b = require('bootstrap')

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    this.setState({comments: Store.getMessages() });
  },
  componentWillMount: function () {
    Store.addChangeListener(this.changeState);
  },
  componentWillUnmount: function () {
    Store.removeChangeListener(this.changeState);
  },
  changeState: function () {
    this.setState({ comments: Store.getMessages() });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.comments;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    var id = comment.id = Date.now();
    var fakeComment = { id: id, text: `PENDING: ${comment.text}` , author: comment.author };
    this.setState({comments: comments.concat([fakeComment])})
    // The update evt coming back from the store will override the comment state with what's canonical
    setTimeout(function(){
      actions.addMessage(comment);    
    },1000)
  },
  getInitialState: function() {
    return {comments: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList comments={this.state.comments} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.comments.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id} text={comment.text}></Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <div className="form-group">
          <label htmlFor="authorName">Your Name</label>
          <input
            className="form-control"
            id="authorName"
            type="text"
            placeholder="John Doe"
            value={this.state.author}
            onChange={this.handleAuthorChange}
          />
        </div>
        <div className="form-group">
          <label htmlFor="messageInput">Message</label>
          <textarea
            className="form-control"
            id="messageInput"
            placeholder="Hello World"
            value={this.state.text}
            onChange={this.handleTextChange}
          />
        </div>
        <button type="submit" value="Post" className="btn btn-default">Submit</button>
      </form>
    );
  }
});

var Comment = React.createClass({
    render: function() {
      return (
        <div className="comment">
          <b className="commentAuthor">
            {this.props.author}:
          </b>
          <p className="commentText">
            {this.props.text}
          </p>
        </div>
      );
    }
});

var App = React.createClass({
  render: function() {
    return <CommentBox />
  }
})

module.exports = App;