(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/gabriellipson/projects/flux-react-boilerplate/app/App.js":[function(require,module,exports){
'use strict';

var Store = require('./Store.js');
var actions = require('./actions.js');
var marked = require('marked');
var React = require('react');
var ReactDOM = require('react-dom');
var LinkedStateMixin = require('react-addons-linked-state-mixin');
var $ = window.jQuery = require('jquery');
var b = require('bootstrap');

var CommentBox = React.createClass({
  displayName: 'CommentBox',

  loadCommentsFromServer: function loadCommentsFromServer() {
    this.setState({ comments: Store.getMessages() });
  },
  componentWillMount: function componentWillMount() {
    Store.addChangeListener(this.changeState);
  },
  componentWillUnmount: function componentWillUnmount() {
    Store.removeChangeListener(this.changeState);
  },
  changeState: function changeState() {
    this.setState({ comments: Store.getMessages() });
  },
  handleCommentSubmit: function handleCommentSubmit(comment) {
    var comments = this.state.comments;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    var id = comment.id = Date.now();
    var fakeComment = { id: id, text: 'PENDING: ' + comment.text, author: comment.author };
    this.setState({ comments: comments.concat([fakeComment]) });
    // The update evt coming back from the store will override the comment state with what's canonical
    setTimeout(function () {
      actions.addMessage(comment);
    }, 1000);
  },
  getInitialState: function getInitialState() {
    return { comments: [] };
  },
  componentDidMount: function componentDidMount() {
    this.loadCommentsFromServer();
  },
  render: function render() {
    return React.createElement(
      'div',
      { className: 'commentBox' },
      React.createElement(
        'h1',
        null,
        'Comments'
      ),
      React.createElement(CommentList, { comments: this.state.comments }),
      React.createElement(CommentForm, { onCommentSubmit: this.handleCommentSubmit })
    );
  }
});

var CommentList = React.createClass({
  displayName: 'CommentList',

  render: function render() {
    var commentNodes = this.props.comments.map(function (comment) {
      return React.createElement(
        Comment,
        { author: comment.author, key: comment.id },
        comment.text
      );
    });
    return React.createElement(
      'div',
      { className: 'commentList' },
      commentNodes
    );
  }
});

var CommentForm = React.createClass({
  displayName: 'CommentForm',

  getInitialState: function getInitialState() {
    return { author: '', text: '' };
  },
  handleAuthorChange: function handleAuthorChange(e) {
    this.setState({ author: e.target.value });
  },
  handleTextChange: function handleTextChange(e) {
    this.setState({ text: e.target.value });
  },
  handleSubmit: function handleSubmit(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({ author: author, text: text });
    this.setState({ author: '', text: '' });
  },
  render: function render() {
    return React.createElement(
      'form',
      { className: 'commentForm', onSubmit: this.handleSubmit },
      React.createElement('input', {
        type: 'text',
        placeholder: 'Your name',
        value: this.state.author,
        onChange: this.handleAuthorChange
      }),
      React.createElement('textarea', {
        placeholder: 'Say something...',
        value: this.state.text,
        onChange: this.handleTextChange
      }),
      React.createElement('input', { type: 'submit', value: 'Post' })
    );
  }
});

var Comment = React.createClass({
  displayName: 'Comment',

  rawMarkup: function rawMarkup() {
    var rawMarkup = marked(this.props.children.toString(), { sanitize: true });
    return { __html: rawMarkup };
  },
  render: function render() {
    return React.createElement(
      'div',
      { className: 'comment' },
      React.createElement(
        'h2',
        { className: 'commentAuthor' },
        this.props.author
      ),
      React.createElement('span', { dangerouslySetInnerHTML: this.rawMarkup() })
    );
  }
});

var App = React.createClass({
  displayName: 'App',

  render: function render() {
    return React.createElement(CommentBox, null);
  }
});

module.exports = App;

},{"./Store.js":"/Users/gabriellipson/projects/flux-react-boilerplate/app/Store.js","./actions.js":"/Users/gabriellipson/projects/flux-react-boilerplate/app/actions.js","bootstrap":"bootstrap","jquery":"jquery","marked":"marked","react":"react","react-addons-linked-state-mixin":"react-addons-linked-state-mixin","react-dom":"react-dom"}],"/Users/gabriellipson/projects/flux-react-boilerplate/app/Store.js":[function(require,module,exports){
'use strict';

var flux = require('flux-react');
var actions = require('./actions.js');

module.exports = flux.createStore({
  messages: [],
  actions: [actions.addMessage],
  addMessage: function addMessage(message) {
    this.messages.push(message);
    this.emitChange();
  },
  exports: {
    getMessages: function getMessages() {
      return this.messages;
    }
  }
});

},{"./actions.js":"/Users/gabriellipson/projects/flux-react-boilerplate/app/actions.js","flux-react":"flux-react"}],"/Users/gabriellipson/projects/flux-react-boilerplate/app/actions.js":[function(require,module,exports){
'use strict';

var flux = require('flux-react');

module.exports = flux.createActions(['addMessage']);

},{"flux-react":"flux-react"}],"/Users/gabriellipson/projects/flux-react-boilerplate/app/main.js":[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');
var App = require('./App.js');

ReactDOM.render(React.createElement(App, null), document.getElementById('app'));

},{"./App.js":"/Users/gabriellipson/projects/flux-react-boilerplate/app/App.js","react":"react","react-dom":"react-dom"}]},{},["/Users/gabriellipson/projects/flux-react-boilerplate/app/main.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
